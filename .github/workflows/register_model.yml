name: Register Model to AML Registry

on:
  repository_dispatch:
    types: [register_model]

permissions:
  id-token: write
  contents: read
env:
  PYTHON_VERSION: "3.12"
  PROJ_VERSION: "2024.10.1"
  NAMESPACE: "aimodelserving"

jobs:
  register:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      - name: Create Python virtual environment
        run: |
          python -m venv venv
          . venv/bin/activate
          python --version
          pip install -r requirements.txt

      - name: Download artifacts
        id: download_artifacts
        run: |
          python --version

          # activate virtual environment
          . venv/bin/activate

          model_name=${{ github.event.client_payload.model_name }}
          version=${{ github.event.client_payload.model_version }}

          artifact_path=$(python ./script/get_model_artifacts.py --model_name "$model_name" --model_version "$version")
          echo "artifact_path=$artifact_path" >> $GITHUB_OUTPUT

        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}

      - name: "Scan model for vulnerabilities"
        run: |
          . venv/bin/activate

          model_name=${{ github.event.client_payload.model_name }}
          artifact_path=${{ steps.download_artifacts.outputs.artifact_path }}

          echo "Scanning model for vulnerabilities"
          ls -al "$artifact_path"

          modelscan --show-skipped -p "$artifact_path"

      - name: "OIDC Login to Azure"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Register Model
        run: |
          . venv/bin/activate

          model_name=${{ github.event.client_payload.model_name }}
          artifact_path=${{ steps.download_artifacts.outputs.artifact_path }}

          python ./script/register_model.py --model_name "$model_name" --artifact_path "$artifact_path"

        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_ML_RESOURCE_GROUP: ${{ secrets.AZURE_ML_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE: ${{ secrets.AZURE_ML_WORKSPACE }}

      - name: Get build version
        run: |
          proj_version="${{ env.PROJ_VERSION}}"
          build_number=$(date +%Y%m%dT%H%M)

          if [[ $GITHUB_REF == refs/heads/releases/* ]]; then
            channel="release"
            version="${proj_version}"
          else
            channel="dev"
            version="${proj_version}.dev${build_number}"
          fi

          echo "RELEASE_VERSION=${version}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${channel}" >> $GITHUB_ENV
      - name: "Build Docker image"
        run: |

          model_name=${{ github.event.client_payload.model_name }}
          model_version=${{ github.event.client_payload.model_version }}
          artifact_path=${{ steps.download_artifacts.outputs.artifact_path }}

          # Create image name and version
          base_image="mlflow"
          dockerfile_path="${{ github.workspace }}/online_endpoint/${base_image}/Dockerfile"
          image="${base_image}_${model_name}_v${model_version}"

          # Get relative path to artifact
          artifact_path=$(realpath --relative-to="${{ github.workspace }}" "$artifact_path")

          # Build Docker image
          echo "Building Docker image"
          ./script/devops.sh build_image --name "$image" --version "${{ env.RELEASE_VERSION }}" --artifact_path "$artifact_path" --dockerfile_path "$dockerfile_path"

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Publish images to Azure Container Registry
        run: |
          model_name="${{ github.event.client_payload.model_name }}"
          model_version="${{ github.event.client_payload.model_version }}"

          # Create image name and version
          base_image="mlflow"
          image="${base_image}_${model_name}_v${model_version}"

          ./script/devops.sh publish_image --name "$image" --version "${{ env.RELEASE_VERSION }}" --channel "${{ env.RELEASE_CHANNEL }}" --registry "${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}.azurecr.io" --namespace "${{ env.NAMESPACE }}"
          docker images
